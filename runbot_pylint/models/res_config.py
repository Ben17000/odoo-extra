# -*- coding: utf-8 -*-
import logging

from openerp import api, fields, models
from openerp.tools.translate import _

from . import lint

logger = logging.getLogger(__name__)
class RunbotConfig(models.TransientModel):
    _inherit = 'runbot.config.settings'

    config_id = fields.Many2one(
        'runbot_pylint.config', required=True,
        default=lambda self: self.env['runbot_pylint.config'].search([], limit=1)
    )

    plugins = fields.Char(related='config_id.plugins')
    lint_ids = fields.Many2many(related='config_id.lint_ids')

    @api.multi
    def reload_messages(self):
        self.config_id.reload_messages()
        return True

class Configuration(models.Model):
    _name = 'runbot_pylint.config'

    plugins = fields.Char(help="Comma-separated list of Pylint plugin names "
                               "to load")
    lint_ids = fields.Many2many(
        'runbot_pylint.config.lint', relation='runbot_pylint_config_lint_link')

    def _init_linter(self, **kw):
        # riff on pylint.lint.Run.__init__
        linter = self._init_linter_with_plugins(**kw)

        linter.disable('all')
        for message in self.lint_ids:
            linter.enable(message.symbol)

        return linter

    def _init_linter_with_plugins(self, **kw):
        linter = lint.Linter(**kw)
        # TODO: load config file? from working copy?
        linter.load_default_plugins()
        linter.load_plugin_modules(self.plugins.split(','))
        return linter

    @api.multi
    def _select_messages(self, symbols):
        self.lint_ids = self.env['runbot_pylint.config.lint'].search([
            ('symbol', 'in', symbols),
        ])

    @api.multi
    def reload_messages(self):
        """ Ensures all messages generated by the currently loaded plugins are
        available for configuration. Configurable messages not present in
        currently loaded plugins are disabled
        """
        Lints = self.env['runbot_pylint.config.lint']
        linter = self._init_linter_with_plugins()
        all_messages = linter.msgs_store._messages

        # get all active lints
        current = {it.symbol for it in Lints.search([])}
        expected = set(all_messages)

        to_add = expected - current
        to_disable = current - expected

        # disable existing lints not present in currently loaded plugins
        Lints.search(
            [('symbol', 'in', list(to_disable))]
        ).write({'active': False})

        # re-enable any to_add item which is already present but disabled
        to_enable = Lints.search([
            '&',
            ('symbol', 'in', list(to_add)),
            ('active', '=', False),
        ])
        to_enable.write({'active': True})

        # remove re-enabled lints from set of lints to create
        to_create = to_add.difference(to_enable.mapped('symbol'))

        # create missing lints
        for symbol in to_create:
            message = all_messages[symbol]
            Lints.create({
                'symbol': message.symbol,
                'label': message.descr,
            })

        logger.info(
            "Reloading lints: %d plugins, %d messages, created %d, enabled %d, disabled %d",
            len(self.plugins.split(',')),
            len(all_messages),
            len(to_create),
            len(to_enable),
            len(to_disable),
        )

class Lint(models.Model):
    _name = 'runbot_pylint.config.lint'
    _order = 'symbol'

    active = fields.Boolean(default=True)
    symbol = fields.Char(index=True, required=True)
    label = fields.Char(required=True)

    @api.multi
    def name_get(self):
        return [
            (lint.id, _("%s (%s)") % (lint.symbol, lint.label))
            for lint in self
        ]
